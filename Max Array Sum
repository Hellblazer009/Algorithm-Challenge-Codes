#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the maxSubsetSum function below.
# [a0 a1 a2 a3 a4 a5 a6 a7]
# base case 
# f[0]= a[0]
# f[1] = max(a[0],a[1]) = max(f[0], a[1])
# f[2] = max(a[0]+a[2],a[1], a[2])
#      = if(lastmax is adj): max(f[1], f[0]+a[2], a[2])
#        if not: max(f[1] + a[2], a[2])
# f[3] = max(a[0]+a[2], a[1] + a[3], a[0]+ a[3], a[3])
#      = if(lastmax is adj): max(f[2], f[1]+a[3], a[3])
#        if not: max(f[2] + a[3], a[3])  
def maxSubsetSum(arr):
    n = len(arr)
    max_sum = [0]*n
    max_sum[0] = arr[0]
    last_ind_flag = 0
    if(arr[1]>= arr[0]):
        max_sum[1] = arr[1]
        last_ind_flag = 1
    else:
        max_sum[1] = arr[0]
        last_ind_flag = 0
    for i in range(2,n):
        if(last_ind_flag == 1):
            #f[i] = max(f[i-1], f[i-2]+a[i], a[i])
            if(max_sum[i-1]>= max_sum[i-2]+arr[i] and max_sum[i-1] >= arr[i]):
                max_sum[i] = max_sum[i-1]
                last_ind_flag = 0
            elif(max_sum[i-2]+arr[i] >= arr[i]):
                max_sum[i] = max_sum[i-2]+arr[i]
                last_ind_flag = 1
            else:
                #arr[i] is max
                max_sum[i] = arr[i]
                last_ind_flag = 1

        else:
            # f[i] = max(f[i-1]+a[i], a[i], f[i-1])
            if(max_sum[i-1]>= max_sum[i-1]+arr[i]):
                max_sum[i] = max_sum[i-1]
                last_ind_flag = 0
            elif(max_sum[i-1]+arr[i] >= arr[i]):
                max_sum[i] = max_sum[i-1]+arr[i]
                last_ind_flag = 1
            else:
                max_sum[i] = arr[i]
                last_ind_flag = 1

    return(max_sum[n-1])
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    res = maxSubsetSum(arr)

    fptr.write(str(res) + '\n')

    fptr.close()
